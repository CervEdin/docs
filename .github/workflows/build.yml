name: 'Build and push new website'

on:
  push
#  pull_request:
#    types: [opened, synchronize, reopened]
#  release:
#    types:
#    - created
#  push:
#    branches:
#      - move-codefresh-to-actions

env:
  MASTER_BRANCH: master
  BUILD_HARNESS_VERSION: 0.5.5
  HUGO_CONFIG: deploy.toml
  HTMLTEST_CONFIG: .htmltest.codefresh.yml
  #TMPDIR: /codefresh/volume
  YARN_BUILD_DISABLED: false
  COMPONENTS_BUILD: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: "Checkout source code at current commit"
      uses: actions/checkout@v2
    - name: Prepare tags for Docker image
      if: (github.event_name == 'release' && github.event.action == 'created') || github.event.pull_request.head.repo.full_name == github.repository
      id: prepare
      run: |
        COMMIT_SHA="${GITHUB_SHA}"
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.pull_request.number }}-merge
          COMMIT_SHA=${{ github.event.pull_request.head.sha }}
        fi
        TAGS=${{ github.repository }}:sha-${COMMIT_SHA:0:7}
        SLIM_TAGS=${{ github.repository }}:slim-sha-${COMMIT_SHA:0:7}
        if [[ -n $VERSION ]]; then
          TAGS="$TAGS,${{ github.repository }}:${VERSION}"
          SLIM_TAGS="$SLIM_TAGS,${{ github.repository }}:slim-${VERSION}"
        fi
        if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          TAGS="$TAGS,${{ github.repository }}:latest"
          SLIM_TAGS="$SLIM_TAGS,${{ github.repository }}:slim-latest"
        fi
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=slim-tags::${SLIM_TAGS}
        # generate individual tags as outputs
        IFS=',' read -ra TAG_ARRAY <<< "${TAGS}"
        echo ::set-output name=first_tag::${TAG_ARRAY[0]}
        #echo ::set-output name=second_tag::${TAG_ARRAY[1]}
    - name: "Set up Docker Buildx"
      uses: docker/setup-buildx-action@v1
    - name: "Login to DockerHub"
      if: (github.event_name == 'release' && github.event.action == 'created') || github.event.pull_request.head.repo.full_name == github.repository
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: "Build and push full docker image to DockerHub"
      id: docker_full_build
      uses: docker/build-push-action@v2
      with:
        push: ${{ (github.event_name == 'release' && github.event.action == 'created') || github.event.pull_request.head.repo.full_name == github.repository }}
        tags: ${{ steps.prepare.outputs.tags }}
#    - name: "Docker push debug"
#      run: |
#        echo ${{ steps.prepare.outputs.tags }}
#        echo ${{ github.repository }}:sha-${GITHUB_SHA:0:7}
#        echo ${{ steps.prepare.outputs.first_tag }}
#        #echo ${{ steps.prepare.outputs.second_tag }}

  build-hugo:
    name: 'Build Hugo'
    runs-on: ubuntu-latest
    needs: [ "build-and-push" ]
    #container: cloudposse/build-harness:0.5.5
    container: ${{ steps.prepare.outputs.first_tag }}

    steps:
    - name: "Checkout source code at current commit"
      uses: actions/checkout@v2
    - name: "Build Hugo"
      run: ./.github/build-hugo/entrypoint.sh

  build-versioned-hugo:
    name: "Build versioned Hugo"
    runs-on: ubuntu-latest

    steps:
    - name: "Build versioned Hugo"
      run: |
        set +e -x
        make git/show
        make git/export | tee -a $(pwd)/env_vars_to_export
        make semver/show
        make semver/export | tee -a $(pwd)/env_vars_to_export
        if "${SEMVERSION_TAG}" != ''; do
          export HUGO_URL=${HUGO_URL}release/${SEMVERSION_TAG}
          export HUGO_PUBLISH_DIR=public/release/${SEMVERSION_TAG}
          make lint
          make release
          make real-clean hugo/build
        fi

  lint:
    name: "Linting"
    runs-on: ubuntu-latest

    steps:
    - name: "Linting"
      run: |
        set +e -x
        export HUGO_EDIT_BRANCH=$(pwd)
        make lint

  cache:
    name: "Build Cache"
    runs-on: ubuntu-latest

    steps:
    - name: "Hydrate Cache"
      run: |
        export HUGO_EDIT_BRANCH=$(pwd)
        make real-clean smoketest || true

  # Testing HTML for validity
  smoketest:
    name: "Smoketest"
    runs-on: ubuntu-latest

    steps:
    - name: "Smoketest"
      run: |
        export HUGO_EDIT_BRANCH=$(pwd)
        make smoketest || true

  # Only deploy on tagged releases
  # Pushing all artifacts to S3 bucket...
  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest

    steps:
    - name: "Deploy"
      run: |
        set +e -x
        make git/show
        make git/export | tee -a $(pwd)/env_vars_to_export
        make semver/show
        make semver/export | tee -a $(pwd)/env_vars_to_export
        if "${SEMVERSION_TAG}" != ''; do
          make deploy
        fi

  # Only reindex on tagged releases
  # Updating algolia search index...
  reindex:
    name: "Reindex Algolia"
    runs-on: ubuntu-latest

    steps:
    - name: "Reindex Algolia"
      run: |
        set +e -x
        make git/show
        make git/export | tee -a $(pwd)/env_vars_to_export
        make semver/show
        make semver/export | tee -a $(pwd)/env_vars_to_export
        if "${SEMVERSION_TAG}" != ''; do
          make reindex
        fi
